Функция ПодключитьСсылку() Экспорт   
	
	Пользователь = Константы.Пользователь.Получить();
	Пароль = Константы.Пароль.Получить();
	
	ВСОпределение = Новый WSОпределения("http://" + СокрЛП(Константы.Сервер.Получить()) + ":" + СокрЛП(Константы.Порт.Получить()) + "/" + СокрЛП(Константы.БазаДанных.Получить()) +"/ws/MobileApp?wsdl",СокрЛП(Пользователь),СокрЛП(Пароль)); 
	ВСПрокси = Новый WSПрокси(ВСОпределение, URIПространстваИмен(),"MobileApp","MobileAppSoap"); 
	ВСПрокси.Пользователь = СокрЛП(Пользователь);
	ВСПрокси.Пароль =  СокрЛП(Пароль);
	Возврат ВСПрокси;
КонецФункции


Процедура ВыполнитьВыгрузкуДанных(Адрес="") Экспорт 
	 Попытка
	 ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", 0,1,"Подключение..."), Адрес); 		 
	 СсылкаWSDL = ПодключитьСсылку();	
	 ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", 0,1,"Подключение установлено!"), Адрес); 	
	 КоличествоОбходов = 0;
	 ДанныеОтправки = СформироватьСтрокуJSON(Адрес,КоличествоОбходов);
	 Ответ = СсылкаWSDL.SendData(ДанныеОтправки);	
	 Если КоличествоОбходов = 0 Тогда 
		КоличествоОбходов = 1; 
	 КонецЕсли;	 
	 
	 ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", КоличествоОбходов,КоличествоОбходов,"Выгрузка завершилась успешно!"), Адрес); 
     Исключение
	 Сообщить(ОписаниеОшибки());
	 КонецПопытки;
КонецПроцедуры	

Функция ПолучитьДанныеИзменений(Узел)
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВнутреннийЗаказИзменения.Ссылка КАК Ссылка,
	               |	ВнутреннийЗаказ.Статус КАК Статус,
	               |	ВнутреннийЗаказ.ДатаПодтвержедия КАК ДатаПодтвержедия,
	               |	ВнутреннийЗаказ.Комментарий КАК Комментарий,
	               |	""ВнутреннийЗаказ"" КАК ТипОбъекта
	               |ИЗ
	               |	Документ.ВнутреннийЗаказ.Изменения КАК ВнутреннийЗаказИзменения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВнутреннийЗаказ КАК ВнутреннийЗаказ
	               |		ПО ВнутреннийЗаказИзменения.Ссылка = ВнутреннийЗаказ.Ссылка
	               |ГДЕ
	               |	ВнутреннийЗаказИзменения.Узел = &Узел
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаказПоставщикуИзменения.Ссылка,
	               |	ЗаказПоставщику.Статус,
	               |	ЗаказПоставщику.ДатаПодтвержедия,
	               |	ЗаказПоставщику.Комментарий,
	               |	""ЗаказПоставщику""
	               |ИЗ
	               |	Документ.ЗаказПоставщику.Изменения КАК ЗаказПоставщикуИзменения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаказПоставщику КАК ЗаказПоставщику
	               |		ПО ЗаказПоставщикуИзменения.Ссылка = ЗаказПоставщику.Ссылка
	               |ГДЕ
	               |	ЗаказПоставщикуИзменения.Узел = &Узел
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	ЗаявкиНаРсходованиеСредствИзменения.Ссылка,
	               |	ЗаявкиНаРсходованиеСредств.Статус,
	               |	ЗаявкиНаРсходованиеСредств.ДатаПодтвержедия,
	               |	ЗаявкиНаРсходованиеСредств.Комментарий,
	               |	""ЗаявкиНаРасходованиеСредств""
	               |ИЗ
	               |	Документ.ЗаявкиНаРсходованиеСредств.Изменения КАК ЗаявкиНаРсходованиеСредствИзменения
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЗаявкиНаРсходованиеСредств КАК ЗаявкиНаРсходованиеСредств
	               |		ПО ЗаявкиНаРсходованиеСредствИзменения.Ссылка = ЗаявкиНаРсходованиеСредств.Ссылка
	               |ГДЕ
	               |	ЗаявкиНаРсходованиеСредствИзменения.Узел = &Узел
	               |ИТОГИ ПО
	               |	ТипОбъекта";
	
	Запрос.УстановитьПараметр("Узел",Узел);
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Возврат Выборка;
	
КонецФункции	

Функция СформироватьСтрокуJSON(Адрес,КоличествоОбходов)
	Узел = ПланыОбмена.МобОбмен.НайтиПоРеквизиту("ИспользоватьВОбмене",Истина);
	ДатаТип = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
	
	СтрокаJSON = "";
	Если ЗначениеЗаполнено(Узел) Тогда 
	ДанныеИзменений = ПолучитьДанныеИзменений(Узел);
	
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	
	СтруктураОбъектов = Новый Структура;
	
	КоличествоОбходов = ДанныеИзменений.Количество();
		
	Инд = 1;

	
	Пока ДанныеИзменений.Следующий() Цикл 		 
		 ВыборкаДокументов = ДанныеИзменений.Выбрать();
		 
		 МассивДокументов = Новый Массив;
		 
		 Пока ВыборкаДокументов.Следующий() Цикл 
			 Инд = Инд + 1;
			 СтруктураДокументов = Новый Структура;
			 СтруктураДокументов.Вставить("DocID",Строка(ВыборкаДокументов.Ссылка.УникальныйИдентификатор()));
			 СтруктураДокументов.Вставить("Status",ВыборкаДокументов.Статус);
			 СтруктураДокументов.Вставить("ConfirmationDate",ФабрикаXDTO.Создать(ДатаТип,ВыборкаДокументов.ДатаПодтвержедия).ЛексическоеЗначение);
             СтруктураДокументов.Вставить("Comment",ВыборкаДокументов.Комментарий);
			 
			 МассивДокументов.Добавить(СтруктураДокументов);
			 
			 ПланыОбмена.УдалитьРегистрациюИзменений(Узел,ВыборкаДокументов.Ссылка.ПолучитьОбъект());			 			 
			 ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов+1,"Формирование данных для отправки..."), Адрес); 
		 КонецЦикла;	 
		 
		 СтруктураОбъектов.Вставить(ДанныеИзменений.ТипОбъекта,МассивДокументов);
		 
	КонецЦикла;	
	
	
	Если КоличествоОбходов = 0 Тогда 
		ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,1,"Нет данных для отправки!"), Адрес); 
	КонецЕсли;	
	
	
	ЗаписатьJSON(ЗаписьJSON,СтруктураОбъектов);
	
	СтрокаJSON = ЗаписьJSON.Закрыть();

	
	КонецЕсли;
	
	Возврат СтрокаJSON;
	
КонецФункции	


Функция URIПространстваИмен()
	Возврат "URIMob";
КонецФункции

Процедура ВыполнитьПроверкуУзла() Экспорт 
	ЭтотУзел = ПланыОбмена.МобОбмен.ЭтотУзел();
	
	Если ЗначениеЗаполнено(ЭтотУзел) Тогда 		
		СсылкаВебСервиса = ПодключитьСсылку();
		
		УзелСозданУспешно = СсылкаВебСервиса.CheckExchangePlans(ЭтотУзел.Наименование,ЭтотУзел.Код);
		Если УзелСозданУспешно = "true" Тогда 
			Сообщить("Настройка узлов прошла успешно!");
			Константы.НастройкиЗаполнены.Установить(Истина);
		Иначе 
			Сообщить("При настройке узлов произошла ошибка!");
			Константы.НастройкиЗаполнены.Установить(Ложь);
		КонецЕсли;	
    КонецЕсли;
	
КонецПроцедуры


Процедура ВыполнитьЗагрузкуДанных(Адрес="") Экспорт 
	
	ЭтотУзел = ПланыОбмена.МобОбмен.ЭтотУзел();
	
	Если ЗначениеЗаполнено(ЭтотУзел) Тогда 		
		ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", 0,1,"Подключение..."), Адрес); 	
		СсылкаВебСервиса = ПодключитьСсылку();
		
		ДанныеJSON = СсылкаВебСервиса.GetData(ЭтотУзел.Код);

		ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", 0,1,"Подключение установлено!"), Адрес); 	
		
		
		ОбработатьДанные(ДанныеJSON,Адрес);
		
		
		
	КонецЕсли;	
	
КонецПроцедуры	

Процедура ОбработатьДанные(JsonТекст,Адрес)
	Чтение = Новый ЧтениеJSON;
	Чтение.УстановитьСтроку(JsonТекст);
	Отв = ПрочитатьJSON(Чтение);
	
	КоличествоОбходов = Отв.Количество();
	Инд = 0;
	
	Для Каждого Стр Из Отв Цикл 
		Инд = Инд + 1;
		Если Стр.Ключ = "Номенклатура" Тогда 
			ОбработатьНоменклатуру(Стр.Значение,Адрес);
		ИначеЕсли Стр.Ключ = "Организация" Тогда 	
			ОбработатьОрганизации(Стр.Значение,Адрес);
		ИначеЕсли Стр.Ключ = "Подразделения" Тогда 	
			ОбработатьПодразделения(Стр.Значение,Адрес);
		ИначеЕсли Стр.Ключ = "Проекты" Тогда 	
			ОбработатьПроекты(Стр.Значение,Адрес);
		ИначеЕсли Стр.Ключ = "Склады" Тогда 	
			ОбработатьСклады(Стр.Значение,Адрес);
		ИначеЕсли Стр.Ключ = "Контрагенты" Тогда 	
			ОбработатьКонтрагенты(Стр.Значение,Адрес);
		ИначеЕсли Стр.Ключ = "Договоры" Тогда 	
			ОбработатьДоговоры(Стр.Значение,Адрес);				
		ИначеЕсли Стр.Ключ = "ВнутреннийЗаказ" Тогда
			ОбработатьВнутренниеЗаказы(Стр.Значение,Адрес);
		ИначеЕсли Стр.Ключ = "ЗаказПоставщику" Тогда
			ОбработатьЗаказыПоставщику(Стр.Значение,Адрес);
		ИначеЕсли Стр.Ключ = "ЗаявкаНаРасходованиеДС" Тогда
			ОбработатьЗаявку(Стр.Значение,Адрес);	
		КонецЕсли;	
		
		ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
		
	КонецЦикла;	
	
	Если КоличествоОбходов <> 0 Тогда 
		ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка завершилась успешно!"), Адрес); 
	Иначе 
		ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", 1,1,"Загрузка завершилась успешно!"), Адрес); 	
	КонецЕсли;	
КонецПроцедуры	


Процедура ОбработатьНоменклатуру(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьНоменклатуру(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры	

Процедура ОбработатьОрганизации(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьОрганизацию(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры	

Процедура ОбработатьПодразделения(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьПодразделение(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьПроекты(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьПроекты(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьВнутренниеЗаказы(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьВнутреннийЗаказ(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьЗаказыПоставщику(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьЗаказПоставщику(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьЗаявку(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьЗаявку(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры


Процедура ОбработатьДоговоры(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 СоздатьДоговоры(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьКонтрагенты(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьКонтрагента(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры

Процедура ОбработатьСклады(Данные,Адрес)
	//КоличествоОбходов = Данные.Количество();
	//Инд = 0;
	Для Каждого Стр Из Данные Цикл 
	 //Инд = Инд + 1;	
	 СоздатьСклад(Стр);
	 //ПоместитьВоВременноеХранилище( Новый Структура("Инд,КоличествоОбходов,СтатусПодключения", Инд,КоличествоОбходов,"Загрузка..."), Адрес); 
	КонецЦикла;
КонецПроцедуры

Процедура СоздатьЗаказПоставщику(СтруктураДанных)
	ДатаТип = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
	
	СсылкаЗП = Документы.ЗаказПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаЗП.Номер) Тогда 
		ЗПОбъект = Документы.ЗаказПоставщику.СоздатьДокумент();
		ЗПОбъект.УстановитьСсылкуНового(СсылкаЗП);			
	Иначе 
		ЗПОбъект = СсылкаЗП.ПолучитьОбъект();
	КонецЕсли;
	ЗПОбъект.Номер = СтруктураДанных.DocNo;
	ЗПОбъект.Дата = ФабрикаXDTO.Создать(ДатаТип,СтруктураДанных.DocDate).Значение;
	
	Если ЗначениеЗаполнено(СтруктураДанных.OrgID) Тогда 
	СсылкаОрганизация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.OrgID));
    ЗПОбъект.Организация = СсылкаОрганизация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.StockID) Тогда  	
	СсылкаСклад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.StockID));	
    ЗПОбъект.Склад = СсылкаСклад;
    КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураДанных.ProjectID) Тогда 
	СсылкаПроект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ProjectID));
    ЗПОбъект.Проект = СсылкаПроект;
    КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураДанных.Customer) Тогда 
	СсылкаКонтрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Customer));
    ЗПОбъект.Контрагент = СсылкаКонтрагент;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураДанных.Contract) Тогда 
	СсылкаДоговор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Contract));
    ЗПОбъект.ДоговорКонтрагента = СсылкаДоговор;
	КонецЕсли;

	
	
	ЗПОбъект.ДатаПоступления = ФабрикаXDTO.Создать(ДатаТип,СтруктураДанных.ArrivalDate).Значение;
	ЗПОбъект.ДатаОплаты = ФабрикаXDTO.Создать(ДатаТип,СтруктураДанных.PaymentDate).Значение;
	
	Если ЗначениеЗаполнено(СтруктураДанных.SubdivisionID) Тогда 
	СсылкаПодразделение = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.SubdivisionID));
    ЗПОбъект.Подразделение = СсылкаПодразделение;
    КонецЕсли;
	
	ЗПОбъект.Пользователь = Константы.Пользователь.Получить();
	
	
	ЗПОбъект.Товары.Очистить();
	Для Каждого Стр Из СтруктураДанных.ItemsRows Цикл 
		
		СтрокаТовары = ЗПОбъект.Товары.Добавить();
		Если ЗначениеЗаполнено(Стр.ItemID) Тогда 
			СсылкаТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ItemID));
			СтрокаТовары.Номенклатура =  СсылкаТовар;
		КонецЕсли;
		СтрокаТовары.Количество = Стр.Quantity;		
		СтрокаТовары.Цена = Стр.Price;		
		СтрокаТовары.Сумма = Стр.Sum;		
	КонецЦикла;	
	
	ЗПОбъект.Услуги.Очистить();
	Для Каждого Стр Из СтруктураДанных.ServiceRows Цикл 
		
		СтрокаУслуги = ЗПОбъект.Услуги.Добавить();
        Если ЗначениеЗаполнено(Стр.ItemID) Тогда 
			СсылкаУслуги = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ItemID));
			СтрокаУслуги.Номенклатура =  СсылкаУслуги;
		КонецЕсли;

		СтрокаУслуги.Количество = Стр.Quantity;	
		СтрокаУслуги.Цена = Стр.Price;		
		СтрокаУслуги.Сумма = Стр.Sum;	
	КонецЦикла;	
	
	ЗПОбъект.ОбменДанными.Загрузка = Истина;
	ЗПОбъект.Проведен = Истина;
	
	ЗПОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры	

Процедура СоздатьЗаявку(СтруктураДанных)
	ДатаТип = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
	
	СсылкаЗаявка = Документы.ЗаявкиНаРсходованиеСредств.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаЗаявка.Номер) Тогда 
		ЗаявкаОбъект = Документы.ЗаявкиНаРсходованиеСредств.СоздатьДокумент();
		ЗаявкаОбъект.УстановитьСсылкуНового(СсылкаЗаявка);			
	Иначе 
		ЗаявкаОбъект = СсылкаЗаявка.ПолучитьОбъект();
	КонецЕсли;
	ЗаявкаОбъект.Номер = СтруктураДанных.DocNo;
	ЗаявкаОбъект.Дата = ФабрикаXDTO.Создать(ДатаТип,СтруктураДанных.DocDate).Значение;
	
	Если ЗначениеЗаполнено(СтруктураДанных.OrgID) Тогда 
	СсылкаОрганизация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.OrgID));
    ЗаявкаОбъект.Организация = СсылкаОрганизация;
	КонецЕсли;
	
	ЗаявкаОбъект.Валюта =  СтруктураДанных.Val;
	
	ЗаявкаОбъект.ФормаОплаты = ?(ЗначениеЗаполнено(СтруктураДанных.PaymentType),Перечисления.ВидыДенежныхСредств[СтруктураДанных.PaymentType],Неопределено);
	
	
	ЗаявкаОбъект.КурсВалюты = СтруктураДанных.ValCur;
	
	Если ЗначениеЗаполнено(СтруктураДанных.Customer) Тогда 
	СсылкаКонтрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Customer));
    ЗаявкаОбъект.Контрагент = СсылкаКонтрагент;
	КонецЕсли;

	//Если ЗначениеЗаполнено(СтруктураДанных.Contract) Тогда 
	//СсылкаДоговор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Contract));
	//ЗаявкаОбъект.ДоговорКонтрагента = СсылкаДоговор;
	//КонецЕсли;

	
	
		
	ЗаявкаОбъект.Пользователь = Константы.Пользователь.Получить();
	
	
		
	ЗаявкаОбъект.РасшифровкаПлатежа.Очистить();
	Для Каждого Стр Из СтруктураДанных.PaymentDetails Цикл 
		
		СтрокаРасшифровки = ЗаявкаОбъект.РасшифровкаПлатежа.Добавить();
        Если ЗначениеЗаполнено(Стр.ContractID) Тогда 
			СсылкаДоговор = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ContractID));
            СтрокаРасшифровки.ДоговорКонтрагента = СсылкаДоговор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Стр.TransactionID) Тогда 
			СсылкаСделка = Документы.ЗаказПоставщику.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.TransactionID));
            СтрокаРасшифровки.Сделка = СсылкаСделка;
		КонецЕсли;

		СтрокаРасшифровки.СуммаВзаиморасчетов = Стр.AMS;		
		СтрокаРасшифровки.КурсВзаиморасчетов = Стр.Cur;		
		СтрокаРасшифровки.СуммаПлатежа = Стр.AP;		
	КонецЦикла;	
	
	ЗаявкаОбъект.ОбменДанными.Загрузка = Истина;
    ЗаявкаОбъект.Проведен = Истина;
	
	ЗаявкаОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры	


Процедура СоздатьВнутреннийЗаказ(СтруктураДанных)
	ДатаТип = ФабрикаXDTO.Тип("http://www.w3.org/2001/XMLSchema", "dateTime");
	
	СсылкаВЗ = Документы.ВнутреннийЗаказ.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаВЗ.Номер) Тогда 
		ВЗОбъект = Документы.ВнутреннийЗаказ.СоздатьДокумент();
		ВЗОбъект.УстановитьСсылкуНового(СсылкаВЗ);			
	Иначе 
		ВЗОбъект = СсылкаВЗ.ПолучитьОбъект();
	КонецЕсли;
	ВЗОбъект.Номер = СтруктураДанных.DocNo;
	ВЗОбъект.Дата = ФабрикаXDTO.Создать(ДатаТип,СтруктураДанных.DocDate).Значение;
	
	Если ЗначениеЗаполнено(СтруктураДанных.OrgID) Тогда 
	СсылкаОрганизация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.OrgID));
    ВЗОбъект.Организация = СсылкаОрганизация;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.StockID) Тогда 
		Если СтруктураДанных.ToStock Тогда 	
			СсылкаЗаказчик = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.StockID));
		Иначе 
			СсылкаЗаказчик = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.StockID));
		КонецЕсли;
	
    ВЗОбъект.Заказчик = СсылкаЗаказчик;
    КонецЕсли;

	Если ЗначениеЗаполнено(СтруктураДанных.ProjectID) Тогда 
	СсылкаПроект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ProjectID));
    ВЗОбъект.Проект = СсылкаПроект;
	КонецЕсли;
	
	ВЗОбъект.ДатаОтгрузки = ФабрикаXDTO.Создать(ДатаТип,СтруктураДанных.ShippingDate).Значение;
	
	Если ЗначениеЗаполнено(СтруктураДанных.SubdivisionID) Тогда 
	СсылкаПодразделение = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.SubdivisionID));
    ВЗОбъект.Подразделение = СсылкаПодразделение;
    КонецЕсли;
	
	ВЗОбъект.Пользователь = Константы.Пользователь.Получить();
	
	
	ВЗОбъект.Товары.Очистить();
	Для Каждого Стр Из СтруктураДанных.ItemsRows Цикл 
		
		СтрокаТовары = ВЗОбъект.Товары.Добавить();
		Если ЗначениеЗаполнено(Стр.ItemID) Тогда 
			СсылкаТовар = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ItemID));
			СтрокаТовары.Номенклатура =  СсылкаТовар;
		КонецЕсли;
		СтрокаТовары.Количество = Стр.Quantity;		
	КонецЦикла;	
	
	ВЗОбъект.Услуги.Очистить();
	Для Каждого Стр Из СтруктураДанных.ServiceRows Цикл 
		
		СтрокаУслуги = ВЗОбъект.Услуги.Добавить();
        Если ЗначениеЗаполнено(Стр.ItemID) Тогда 
			СсылкаУслуги = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(Стр.ItemID));
			СтрокаУслуги.Номенклатура =  СсылкаУслуги;
		КонецЕсли;

		СтрокаУслуги.Количество = Стр.Quantity;		
	КонецЦикла;	
	
	
	
	
	ВЗОбъект.ОбменДанными.Загрузка = Истина;
	ВЗОбъект.Проведен = Истина;
	
	ВЗОбъект.Записать(РежимЗаписиДокумента.Запись);
	
КонецПроцедуры	


Процедура СоздатьДоговоры(СтруктураДанных)
	
	СсылкаДоговора = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаДоговора.Код) Тогда 
		Если СтруктураДанных.Group Тогда 
			ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьГруппу();
		Иначе 	
			ДоговорОбъект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		КонецЕсли;
		ДоговорОбъект.УстановитьСсылкуНового(СсылкаДоговора);			
	Иначе 
		ДоговорОбъект = СсылкаДоговора.ПолучитьОбъект();
	КонецЕсли;
	ДоговорОбъект.Код = СтруктураДанных.ItemCode;
	ДоговорОбъект.Наименование = СтруктураДанных.ItemName;
		
	Если ЗначениеЗаполнено(СтруктураДанных.Parent) Тогда 
		СсылкаРодитель = Справочники.ДоговорыКонтрагентов.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Parent));
		ДоговорОбъект.Родитель = СсылкаРодитель;
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(СтруктураДанных.Owner) Тогда 
		СсылкаВладелец = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Owner));
		ДоговорОбъект.Владелец = СсылкаВладелец;
	КонецЕсли;
	
	ДоговорОбъект.ОбменДанными.Загрузка = Истина;
	ДоговорОбъект.Записать();
	
КонецПроцедуры	



Процедура СоздатьКонтрагента(СтруктураДанных)
	
	СсылкаКонтрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаКонтрагент.Код) Тогда 
		Если СтруктураДанных.Group Тогда 
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьГруппу();
		Иначе 	
			КонтрагентОбъект = Справочники.Контрагенты.СоздатьЭлемент();
		КонецЕсли;
		КонтрагентОбъект.УстановитьСсылкуНового(СсылкаКонтрагент);			
	Иначе 
		КонтрагентОбъект = СсылкаКонтрагент.ПолучитьОбъект();
	КонецЕсли;
	КонтрагентОбъект.Код = СтруктураДанных.ItemCode;
	КонтрагентОбъект.Наименование = СтруктураДанных.ItemName;
		
	Если ЗначениеЗаполнено(СтруктураДанных.Parent) Тогда 
		СсылкаРодитель = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Parent));
		КонтрагентОбъект.Родитель = СсылкаРодитель;
	КонецЕсли;	
	
	КонтрагентОбъект.ОбменДанными.Загрузка = Истина;
	КонтрагентОбъект.Записать();
	
КонецПроцедуры	



Процедура СоздатьСклад(СтруктураДанных)
	
	СсылкаСклад = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаСклад.Код) Тогда 
		Если СтруктураДанных.Group Тогда 
			СкладОбъект = Справочники.Склады.СоздатьГруппу();
		Иначе 	
			СкладОбъект = Справочники.Склады.СоздатьЭлемент();
		КонецЕсли;
		СкладОбъект.УстановитьСсылкуНового(СсылкаСклад);			
	Иначе 
		СкладОбъект = СсылкаСклад.ПолучитьОбъект();
	КонецЕсли;
	СкладОбъект.Код = СтруктураДанных.ItemCode;
	СкладОбъект.Наименование = СтруктураДанных.ItemName;
		
	Если ЗначениеЗаполнено(СтруктураДанных.Parent) Тогда 
		СсылкаРодитель = Справочники.Склады.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Parent));
		СкладОбъект.Родитель = СсылкаРодитель;
	КонецЕсли;	
	
	СкладОбъект.ОбменДанными.Загрузка = Истина;
	СкладОбъект.Записать();
	
КонецПроцедуры	


Процедура СоздатьПроекты(СтруктураДанных)
	
	СсылкаПроект = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаПроект.Код) Тогда 
		Если СтруктураДанных.Group Тогда 
			ПроектОбъект = Справочники.Проекты.СоздатьГруппу();
		Иначе 	
			ПроектОбъект = Справочники.Проекты.СоздатьЭлемент();
		КонецЕсли;
		ПроектОбъект.УстановитьСсылкуНового(СсылкаПроект);			
	Иначе 
		ПроектОбъект = СсылкаПроект.ПолучитьОбъект();
	КонецЕсли;
	ПроектОбъект.Код = СтруктураДанных.ItemCode;
	ПроектОбъект.Наименование = СтруктураДанных.ItemName;
		
	Если ЗначениеЗаполнено(СтруктураДанных.Parent) Тогда 
		СсылкаРодитель = Справочники.Проекты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Parent));
		ПроектОбъект.Родитель = СсылкаРодитель;
	КонецЕсли;	
	
	ПроектОбъект.ОбменДанными.Загрузка = Истина;
	ПроектОбъект.Записать();
	
КонецПроцедуры	


Процедура СоздатьПодразделение(СтруктураДанных)
	
	СсылкаПодразделение = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаПодразделение.Код) Тогда 		
		ПодразделениеОбъект = Справочники.Подразделения.СоздатьЭлемент();
		ПодразделениеОбъект.УстановитьСсылкуНового(СсылкаПодразделение);			
	Иначе 
		ПодразделениеОбъект = СсылкаПодразделение.ПолучитьОбъект();
	КонецЕсли;
	ПодразделениеОбъект.Код = СтруктураДанных.ItemCode;
	ПодразделениеОбъект.Наименование = СтруктураДанных.ItemName;
	
	
	Если ЗначениеЗаполнено(СтруктураДанных.Parent) Тогда 
		СсылкаРодитель = Справочники.Подразделения.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Parent));
		ПодразделениеОбъект.Родитель = СсылкаРодитель;
	КонецЕсли;	
	ПодразделениеОбъект.ОбменДанными.Загрузка = Истина;
	ПодразделениеОбъект.Записать();
	
КонецПроцедуры	


Процедура СоздатьОрганизацию(СтруктураДанных)
    СсылкаОрганизация = Справочники.Организации.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаОрганизация.Код) Тогда 	
		ОрганизацияОбъект = Справочники.Организации.СоздатьЭлемент();		
		ОрганизацияОбъект.УстановитьСсылкуНового(СсылкаОрганизация);			
	Иначе 
		ОрганизацияОбъект = СсылкаОрганизация.ПолучитьОбъект();
	КонецЕсли;
	ОрганизацияОбъект.Код = СтруктураДанных.ItemCode;
	ОрганизацияОбъект.Наименование = СтруктураДанных.ItemName;
	
	ОрганизацияОбъект.ОбменДанными.Загрузка = Истина;
	ОрганизацияОбъект.Записать();

КонецПроцедуры	


Процедура СоздатьНоменклатуру(СтруктураДанных)
	
	СсылкаНоменклатура = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.ID));
	
	Если Не ЗначениеЗаполнено(СсылкаНоменклатура.Код) Тогда 
		Если СтруктураДанных.Group Тогда 
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьГруппу();
		Иначе 	
			НоменклатураОбъект = Справочники.Номенклатура.СоздатьЭлемент();
		КонецЕсли;
		НоменклатураОбъект.УстановитьСсылкуНового(СсылкаНоменклатура);			
	Иначе 
		НоменклатураОбъект = СсылкаНоменклатура.ПолучитьОбъект();
	КонецЕсли;
	НоменклатураОбъект.Код = СтруктураДанных.ItemCode;
	НоменклатураОбъект.Наименование = СтруктураДанных.ItemName;
	Если Не СтруктураДанных.Group Тогда
	 НоменклатураОбъект.Артикул =  СтруктураДанных.Art;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтруктураДанных.MainSupplier) Тогда 
		СсылкаКонтрагент = Справочники.Контрагенты.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.MainSupplier));
		НоменклатураОбъект.ОсновнойПоставщик = СсылкаКонтрагент;
	КонецЕсли;

	
	Если ЗначениеЗаполнено(СтруктураДанных.Parent) Тогда 
		СсылкаРодитель = Справочники.Номенклатура.ПолучитьСсылку(Новый УникальныйИдентификатор(СтруктураДанных.Parent));
		НоменклатураОбъект.Родитель = СсылкаРодитель;
	КонецЕсли;	
	
	НоменклатураОбъект.ОбменДанными.Загрузка = Истина;
	НоменклатураОбъект.Записать();
	
КонецПроцедуры	

Процедура ОбновитьИдентификаторПодписчикаНаСервере(Идентификатор) Экспорт 
    СсылкаПодключения = МодульОбмена.ПодключитьСсылку();
	
	СсылкаПодключения.RefreshID(Идентификатор);	
КонецПроцедуры	



//////////////////////////
